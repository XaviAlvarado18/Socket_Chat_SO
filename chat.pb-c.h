/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: chat.proto */

#ifndef PROTOBUF_C_chat_2eproto__INCLUDED
#define PROTOBUF_C_chat_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Chat__User Chat__User;
typedef struct Chat__NewUserRequest Chat__NewUserRequest;
typedef struct Chat__SendMessageRequest Chat__SendMessageRequest;
typedef struct Chat__IncomingMessageResponse Chat__IncomingMessageResponse;
typedef struct Chat__UserListRequest Chat__UserListRequest;
typedef struct Chat__UserListResponse Chat__UserListResponse;
typedef struct Chat__UpdateStatusRequest Chat__UpdateStatusRequest;
typedef struct Chat__Request Chat__Request;
typedef struct Chat__Response Chat__Response;


/* --- enums --- */

/*
 * Enumeration of potential user statuses to clearly define possible states a user can have.
 * This state is not functional but represent the user's availability to receive messages.
 */
typedef enum _Chat__UserStatus {
  /*
   * The user is online and available to receive messages.
   */
  CHAT__USER_STATUS__ONLINE = 0,
  /*
   * The user is online but marked as busy, may not respond promptly.
   */
  CHAT__USER_STATUS__BUSY = 1,
  /*
   * The user is offline and cannot receive messages.
   */
  CHAT__USER_STATUS__OFFLINE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHAT__USER_STATUS)
} Chat__UserStatus;
typedef enum _Chat__MessageType {
  /*
   * Message is broadcast to all online users.
   */
  CHAT__MESSAGE_TYPE__BROADCAST = 0,
  /*
   * Message is sent to a specific user.
   */
  CHAT__MESSAGE_TYPE__DIRECT = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHAT__MESSAGE_TYPE)
} Chat__MessageType;
typedef enum _Chat__UserListType {
  /*
   * Fetch all connected users.
   */
  CHAT__USER_LIST_TYPE__ALL = 0,
  /*
   * Fetch details for a single user.
   */
  CHAT__USER_LIST_TYPE__SINGLE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHAT__USER_LIST_TYPE)
} Chat__UserListType;
typedef enum _Chat__Operation {
  CHAT__OPERATION__REGISTER_USER = 0,
  CHAT__OPERATION__SEND_MESSAGE = 1,
  CHAT__OPERATION__UPDATE_STATUS = 2,
  CHAT__OPERATION__GET_USERS = 3,
  CHAT__OPERATION__UNREGISTER_USER = 4,
  CHAT__OPERATION__INCOMING_MESSAGE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHAT__OPERATION)
} Chat__Operation;
typedef enum _Chat__StatusCode {
  /*
   * Default value, should not be used in normal operations
   */
  CHAT__STATUS_CODE__UNKNOWN_STATUS = 0,
  /*
   * Request has succeeded
   */
  CHAT__STATUS_CODE__OK = 200,
  /*
   * Request cannot be fulfilled due to bad syntax (este podrÃ­a ser el utilizado general)
   */
  CHAT__STATUS_CODE__BAD_REQUEST = 400,
  /*
   * A generic error message, given when no more specific message is suitable
   */
  CHAT__STATUS_CODE__INTERNAL_SERVER_ERROR = 500
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHAT__STATUS_CODE)
} Chat__StatusCode;

/* --- messages --- */

/*
 * User represents the essential information about a chat user.
 */
struct  Chat__User
{
  ProtobufCMessage base;
  /*
   * Unique identifier for the user.
   */
  char *username;
  /*
   * Current status of the user, indicating availability.
   */
  Chat__UserStatus status;
};
#define CHAT__USER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__user__descriptor) \
    , (char *)protobuf_c_empty_string, CHAT__USER_STATUS__ONLINE }


/*
 * NewUserRequest is used to register a new user on the chat server.
 */
struct  Chat__NewUserRequest
{
  ProtobufCMessage base;
  /*
   * Desired username for the new user. Must be unique across all users.
   */
  char *username;
};
#define CHAT__NEW_USER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__new_user_request__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * MessageRequest represents a request to send a chat message.
 */
struct  Chat__SendMessageRequest
{
  ProtobufCMessage base;
  /*
   * Username of the recipient. If empty, the message is broadcast to all online users.
   */
  char *recipient;
  /*
   * Content of the message being sent.
   */
  char *content;
};
#define CHAT__SEND_MESSAGE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__send_message_request__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Chat__IncomingMessageResponse
{
  ProtobufCMessage base;
  /*
   * Username of the user who sent the message.
   */
  char *sender;
  /*
   * Content of the message.
   */
  char *content;
  /*
   * Type of message
   */
  Chat__MessageType type;
};
#define CHAT__INCOMING_MESSAGE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__incoming_message_response__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, CHAT__MESSAGE_TYPE__BROADCAST }


/*
 * UserListRequest is used to fetch a list of currently connected users.
 */
struct  Chat__UserListRequest
{
  ProtobufCMessage base;
  /*
   * Specific username to fetch details for. If empty, fetches all connected users.
   */
  char *username;
};
#define CHAT__USER_LIST_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__user_list_request__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * UserListResponse returns a list of users.
 */
struct  Chat__UserListResponse
{
  ProtobufCMessage base;
  /*
   * List of users meeting the criteria specified in UserListRequest.
   */
  size_t n_users;
  Chat__User **users;
  Chat__UserListType type;
};
#define CHAT__USER_LIST_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__user_list_response__descriptor) \
    , 0,NULL, CHAT__USER_LIST_TYPE__ALL }


/*
 * UpdateStatusRequest is used to change the status of a user.
 */
struct  Chat__UpdateStatusRequest
{
  ProtobufCMessage base;
  /*
   * Username of the user whose status is to be updated.
   */
  char *username;
  /*
   * The new status to be applied to the user.
   */
  Chat__UserStatus new_status;
};
#define CHAT__UPDATE_STATUS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__update_status_request__descriptor) \
    , (char *)protobuf_c_empty_string, CHAT__USER_STATUS__ONLINE }


typedef enum {
  CHAT__REQUEST__PAYLOAD__NOT_SET = 0,
  CHAT__REQUEST__PAYLOAD_REGISTER_USER = 2,
  CHAT__REQUEST__PAYLOAD_SEND_MESSAGE = 3,
  CHAT__REQUEST__PAYLOAD_UPDATE_STATUS = 4,
  CHAT__REQUEST__PAYLOAD_GET_USERS = 5,
  CHAT__REQUEST__PAYLOAD_UNREGISTER_USER = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHAT__REQUEST__PAYLOAD__CASE)
} Chat__Request__PayloadCase;

/*
 * Request types consolidated into a unified structure with a type indicator.
 */
struct  Chat__Request
{
  ProtobufCMessage base;
  /*
   * Indicates the type of request being made.
   */
  Chat__Operation operation;
  Chat__Request__PayloadCase payload_case;
  union {
    Chat__NewUserRequest *register_user;
    Chat__SendMessageRequest *send_message;
    Chat__UpdateStatusRequest *update_status;
    Chat__UserListRequest *get_users;
    Chat__User *unregister_user;
  };
};
#define CHAT__REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__request__descriptor) \
    , CHAT__OPERATION__REGISTER_USER, CHAT__REQUEST__PAYLOAD__NOT_SET, {0} }


typedef enum {
  CHAT__RESPONSE__RESULT__NOT_SET = 0,
  CHAT__RESPONSE__RESULT_USER_LIST = 4,
  CHAT__RESPONSE__RESULT_INCOMING_MESSAGE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHAT__RESPONSE__RESULT__CASE)
} Chat__Response__ResultCase;

/*
 * Response is a generalized structure used for all responses from the server.
 */
struct  Chat__Response
{
  ProtobufCMessage base;
  /*
   * Indicates the type of operation being performed.
   */
  Chat__Operation operation;
  /*
   * Status code indicating the outcome of the operation.
   */
  Chat__StatusCode status_code;
  /*
   * Human-readable (We XD) message providing more details about the result.
   */
  char *message;
  Chat__Response__ResultCase result_case;
  union {
    /*
     * Details specific to user list requests.
     */
    Chat__UserListResponse *user_list;
    /*
     * Details specific to incoming chat messages.
     */
    Chat__IncomingMessageResponse *incoming_message;
  };
};
#define CHAT__RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__response__descriptor) \
    , CHAT__OPERATION__REGISTER_USER, CHAT__STATUS_CODE__UNKNOWN_STATUS, (char *)protobuf_c_empty_string, CHAT__RESPONSE__RESULT__NOT_SET, {0} }


/* Chat__User methods */
void   chat__user__init
                     (Chat__User         *message);
size_t chat__user__get_packed_size
                     (const Chat__User   *message);
size_t chat__user__pack
                     (const Chat__User   *message,
                      uint8_t             *out);
size_t chat__user__pack_to_buffer
                     (const Chat__User   *message,
                      ProtobufCBuffer     *buffer);
Chat__User *
       chat__user__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__user__free_unpacked
                     (Chat__User *message,
                      ProtobufCAllocator *allocator);
/* Chat__NewUserRequest methods */
void   chat__new_user_request__init
                     (Chat__NewUserRequest         *message);
size_t chat__new_user_request__get_packed_size
                     (const Chat__NewUserRequest   *message);
size_t chat__new_user_request__pack
                     (const Chat__NewUserRequest   *message,
                      uint8_t             *out);
size_t chat__new_user_request__pack_to_buffer
                     (const Chat__NewUserRequest   *message,
                      ProtobufCBuffer     *buffer);
Chat__NewUserRequest *
       chat__new_user_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__new_user_request__free_unpacked
                     (Chat__NewUserRequest *message,
                      ProtobufCAllocator *allocator);
/* Chat__SendMessageRequest methods */
void   chat__send_message_request__init
                     (Chat__SendMessageRequest         *message);
size_t chat__send_message_request__get_packed_size
                     (const Chat__SendMessageRequest   *message);
size_t chat__send_message_request__pack
                     (const Chat__SendMessageRequest   *message,
                      uint8_t             *out);
size_t chat__send_message_request__pack_to_buffer
                     (const Chat__SendMessageRequest   *message,
                      ProtobufCBuffer     *buffer);
Chat__SendMessageRequest *
       chat__send_message_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__send_message_request__free_unpacked
                     (Chat__SendMessageRequest *message,
                      ProtobufCAllocator *allocator);
/* Chat__IncomingMessageResponse methods */
void   chat__incoming_message_response__init
                     (Chat__IncomingMessageResponse         *message);
size_t chat__incoming_message_response__get_packed_size
                     (const Chat__IncomingMessageResponse   *message);
size_t chat__incoming_message_response__pack
                     (const Chat__IncomingMessageResponse   *message,
                      uint8_t             *out);
size_t chat__incoming_message_response__pack_to_buffer
                     (const Chat__IncomingMessageResponse   *message,
                      ProtobufCBuffer     *buffer);
Chat__IncomingMessageResponse *
       chat__incoming_message_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__incoming_message_response__free_unpacked
                     (Chat__IncomingMessageResponse *message,
                      ProtobufCAllocator *allocator);
/* Chat__UserListRequest methods */
void   chat__user_list_request__init
                     (Chat__UserListRequest         *message);
size_t chat__user_list_request__get_packed_size
                     (const Chat__UserListRequest   *message);
size_t chat__user_list_request__pack
                     (const Chat__UserListRequest   *message,
                      uint8_t             *out);
size_t chat__user_list_request__pack_to_buffer
                     (const Chat__UserListRequest   *message,
                      ProtobufCBuffer     *buffer);
Chat__UserListRequest *
       chat__user_list_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__user_list_request__free_unpacked
                     (Chat__UserListRequest *message,
                      ProtobufCAllocator *allocator);
/* Chat__UserListResponse methods */
void   chat__user_list_response__init
                     (Chat__UserListResponse         *message);
size_t chat__user_list_response__get_packed_size
                     (const Chat__UserListResponse   *message);
size_t chat__user_list_response__pack
                     (const Chat__UserListResponse   *message,
                      uint8_t             *out);
size_t chat__user_list_response__pack_to_buffer
                     (const Chat__UserListResponse   *message,
                      ProtobufCBuffer     *buffer);
Chat__UserListResponse *
       chat__user_list_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__user_list_response__free_unpacked
                     (Chat__UserListResponse *message,
                      ProtobufCAllocator *allocator);
/* Chat__UpdateStatusRequest methods */
void   chat__update_status_request__init
                     (Chat__UpdateStatusRequest         *message);
size_t chat__update_status_request__get_packed_size
                     (const Chat__UpdateStatusRequest   *message);
size_t chat__update_status_request__pack
                     (const Chat__UpdateStatusRequest   *message,
                      uint8_t             *out);
size_t chat__update_status_request__pack_to_buffer
                     (const Chat__UpdateStatusRequest   *message,
                      ProtobufCBuffer     *buffer);
Chat__UpdateStatusRequest *
       chat__update_status_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__update_status_request__free_unpacked
                     (Chat__UpdateStatusRequest *message,
                      ProtobufCAllocator *allocator);
/* Chat__Request methods */
void   chat__request__init
                     (Chat__Request         *message);
size_t chat__request__get_packed_size
                     (const Chat__Request   *message);
size_t chat__request__pack
                     (const Chat__Request   *message,
                      uint8_t             *out);
size_t chat__request__pack_to_buffer
                     (const Chat__Request   *message,
                      ProtobufCBuffer     *buffer);
Chat__Request *
       chat__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__request__free_unpacked
                     (Chat__Request *message,
                      ProtobufCAllocator *allocator);
/* Chat__Response methods */
void   chat__response__init
                     (Chat__Response         *message);
size_t chat__response__get_packed_size
                     (const Chat__Response   *message);
size_t chat__response__pack
                     (const Chat__Response   *message,
                      uint8_t             *out);
size_t chat__response__pack_to_buffer
                     (const Chat__Response   *message,
                      ProtobufCBuffer     *buffer);
Chat__Response *
       chat__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__response__free_unpacked
                     (Chat__Response *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Chat__User_Closure)
                 (const Chat__User *message,
                  void *closure_data);
typedef void (*Chat__NewUserRequest_Closure)
                 (const Chat__NewUserRequest *message,
                  void *closure_data);
typedef void (*Chat__SendMessageRequest_Closure)
                 (const Chat__SendMessageRequest *message,
                  void *closure_data);
typedef void (*Chat__IncomingMessageResponse_Closure)
                 (const Chat__IncomingMessageResponse *message,
                  void *closure_data);
typedef void (*Chat__UserListRequest_Closure)
                 (const Chat__UserListRequest *message,
                  void *closure_data);
typedef void (*Chat__UserListResponse_Closure)
                 (const Chat__UserListResponse *message,
                  void *closure_data);
typedef void (*Chat__UpdateStatusRequest_Closure)
                 (const Chat__UpdateStatusRequest *message,
                  void *closure_data);
typedef void (*Chat__Request_Closure)
                 (const Chat__Request *message,
                  void *closure_data);
typedef void (*Chat__Response_Closure)
                 (const Chat__Response *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    chat__user_status__descriptor;
extern const ProtobufCEnumDescriptor    chat__message_type__descriptor;
extern const ProtobufCEnumDescriptor    chat__user_list_type__descriptor;
extern const ProtobufCEnumDescriptor    chat__operation__descriptor;
extern const ProtobufCEnumDescriptor    chat__status_code__descriptor;
extern const ProtobufCMessageDescriptor chat__user__descriptor;
extern const ProtobufCMessageDescriptor chat__new_user_request__descriptor;
extern const ProtobufCMessageDescriptor chat__send_message_request__descriptor;
extern const ProtobufCMessageDescriptor chat__incoming_message_response__descriptor;
extern const ProtobufCMessageDescriptor chat__user_list_request__descriptor;
extern const ProtobufCMessageDescriptor chat__user_list_response__descriptor;
extern const ProtobufCMessageDescriptor chat__update_status_request__descriptor;
extern const ProtobufCMessageDescriptor chat__request__descriptor;
extern const ProtobufCMessageDescriptor chat__response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_chat_2eproto__INCLUDED */
